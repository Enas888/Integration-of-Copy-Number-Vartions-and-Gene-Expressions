import pandas as pd
import numpy as np
from scipy.stats import shapiro
import matplotlib.pyplot as plt
from scipy.stats import wilcoxon
from statsmodels.stats.multitest import multipletests

# Define file paths
data_folder = r'C:\Users\Enas Emad\Dropbox\genomic\project\Project_Data'

# Example usage_kirc
cancer_type = 'kirc' 
ge_cancer_file = f'{data_folder}\\{cancer_type}-rsem-fpkm-tcga-t_paired.txt'
ge_healthy_file = f'{data_folder}\\{cancer_type}-rsem-fpkm-tcga_paired.txt'
cna_file = f'{data_folder}\\{cancer_type}_CNV_core.txt'


def load_expression_data(file_path):
    data = pd.read_csv(file_path, sep='\t')
    data = data.drop(data.columns[1], axis=1) # delete 2nd column "Entrez_Gene_Id"
    print("Gene Expression Data Shape (Before Preprocessing):", data.shape)
    print(data.iloc[:5, :5] )
    return data

# Load both cancer and healthy gene expression data
print("Loading Gene Expression Data for Cancer...")
cancer_data = load_expression_data(ge_cancer_file)
print("Loading Gene Expression Data for Healthy...")
healthy_data = load_expression_data(ge_healthy_file)

# Check for missing values
# print(cancer_data.isnull().sum())
# print(healthy_data.isnull().sum())

# Check the range of values in the columns you are interested in
print("min values", cancer_data.iloc[:, 1:].min())
print("max values", cancer_data.iloc[:, 1:].max())

# Remove samples with null values
print(cancer_data.shape)
print(healthy_data.shape)


cancer_ge_data = cancer_data.dropna()
healthy_ge_data = healthy_data.dropna()


print(cancer_ge_data.shape)
print(healthy_ge_data.shape)


print(cancer_data.shape)
print(healthy_data.shape)

# Exclude the first column from both DataFrames (assuming 'hugo_symbol' is the first column)
cancer_data_filtered = cancer_data.iloc[:, 1:]
healthy_data_filtered = healthy_data.iloc[:, 1:]

# Calculate the percentage of zeros in each row for both DataFrames
zeros_percentage_cancer = (cancer_data.iloc[:, 1:] == 0).sum(axis=1) / (cancer_data.shape[1] - 1)
zeros_percentage_healthy = (healthy_data.iloc[:, 1:] == 0).sum(axis=1) / (healthy_data.shape[1] - 1)

# Get the indices of rows to be dropped based on both DataFrames
rows_to_drop_cancer = zeros_percentage_cancer[zeros_percentage_cancer >= 0.5].index
rows_to_drop_healthy = zeros_percentage_healthy[zeros_percentage_healthy >= 0.5].index

# Filter rows with mean not equal to 0 from both datasets using the above indices
cancer_ge_data = cancer_data.drop(rows_to_drop_cancer)
healthy_ge_data = healthy_data.drop(rows_to_drop_healthy)

# Synchronize the indices of both DataFrames
common_indices = cancer_ge_data.index.intersection(healthy_ge_data.index)
cancer_ge_data = cancer_ge_data.loc[common_indices]
healthy_ge_data = healthy_ge_data.loc[common_indices]

# Print the original and filtered DataFrame shapes
print("Original cancer DataFrame:")
print(cancer_data.iloc[:5, :5])

print("\nFiltered cancer DataFrame:")
print(cancer_ge_data.iloc[:5, :5])

print("\nOriginal healthy DataFrame:")
print(healthy_data.iloc[:5, :5])

print("\nFiltered healthy DataFrame:")
print(healthy_ge_data.iloc[:5, :5])

print(cancer_ge_data.shape)
print(healthy_ge_data.shape)


# Perform Wilcoxon signed-rank test for each gene
def wilcoxon_signed_rank_test(cancer_data, healthy_data, epsilon=1e-8):
    p_values = []
    genes = []  # List to store corresponding gene symbols
    for i in range(cancer_data.shape[0]):
        _, p_value = wilcoxon(cancer_data.iloc[i, 1:] + epsilon, healthy_data.iloc[i, 1:])
        p_values.append(p_value)
        genes.append(cancer_data.iloc[i, 0])  # 'Hugo_Symbol' is the first column
    p_values = np.array(p_values)
    genes = np.array(genes)
    print("Wilcoxon p-values Shape:", p_values.shape)
    print("Wilcoxon p-values:")
    print(p_values)
    print("Gene Symbols:")
    print(genes)
    return genes, p_values

genes, p_values = wilcoxon_signed_rank_test(cancer_ge_data, healthy_ge_data)


# Calculate fold change
epsilon = 1e-9
cancer_mean = cancer_ge_data.iloc[:, 1:].mean(axis=1)
healthy_mean = healthy_ge_data.iloc[:, 1:].mean(axis=1)
fold_change = np.log2(((cancer_mean ) + epsilon ) / ((healthy_mean ) + epsilon ))
print("Fold Change Shape:", fold_change.shape)
print("Fold Change Values:")
print(fold_change)

# Get the corresponding gene symbols (Hugo_Symbol)
gene_symbols = cancer_ge_data.iloc[:, 0]  # Assuming 'Hugo_Symbol' is the first column

# Create a DataFrame to store gene symbols and fold change values
fold_change_df = pd.DataFrame({'Hugo_Symbol': gene_symbols, 'Fold Change': fold_change})

# Sort the DataFrame by the absolute values of fold change
sorted_fold_change_df = fold_change_df.reindex(fold_change_df['Fold Change'].abs().sort_values(ascending=False).index)

# Print the sorted DataFrame
print("\nSorted Fold Change DataFrame:")
print(sorted_fold_change_df)



# Define differentially expressed genes (DEGs) based on p-value and fold change thresholds
p_value_threshold = 0.05
fold_change_threshold = 1.5
DEGs = (p_values < p_value_threshold) & (np.abs(fold_change) > fold_change_threshold)

# Plot volcano plot
plt.figure(figsize=(10, 6))
plt.scatter(fold_change, -np.log10(p_values), color='gray', alpha=0.7, label='Non-DEGs', s=10)
plt.scatter(fold_change[DEGs], -np.log10(p_values[DEGs]), color='pink', alpha=0.7, label='DEGs', s=10)

# Adding horizontal lines for log2FC threshold
plt.axvline(x=np.log2(fold_change_threshold), color='green', linestyle='--', linewidth=1, label='Fold Change Threshold=1.5')
plt.axvline(x=-np.log2(fold_change_threshold), color='green', linestyle='--', linewidth=1)

# Adding horizontal line for adjusted p-value (Padj) threshold
plt.axhline(y=-np.log10(p_value_threshold), color='red', linestyle='--', linewidth=1, label='p-value Threshold=0.05')

plt.xlabel('Log2 Fold Change')
plt.ylabel('-log10(p-value)')
plt.title('Volcano Plot')
plt.legend()
plt.show()

# Calculate absolute fold change
abs_fold_change = np.abs(fold_change)

# Combine fold change, p-values, and gene symbols into a DataFrame
data = {'Hugo_Symbol': gene_symbols, 'Fold Change': fold_change, 'Abs Fold Change': abs_fold_change, 'P-value': p_values}
df = pd.DataFrame(data)

# Sort DataFrame by absolute fold change in descending order and p-value in ascending order
sorted_df = df.sort_values(by=['Abs Fold Change', 'P-value'], ascending=[False, True])

# Get the top 5 most differentially expressed genes
top_5_genes = sorted_df.head(5)

print("Top 5 Most Differentially Expressed Genes:")
print(top_5_genes)


